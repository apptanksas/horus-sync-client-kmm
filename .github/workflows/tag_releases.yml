name: Release stable version

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  create_tag_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if branch is a release branch
        id: check_release_branch
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "Branch name: $BRANCH_NAME"
          if [[ "$BRANCH_NAME" == release/* ]]; then
            VERSION="${BRANCH_NAME#release/}"
            TAG="v$VERSION"
            echo "release=true" >> $GITHUB_ENV
            echo "version=$TAG" >> $GITHUB_ENV
          else
            echo "release=false" >> $GITHUB_ENV
          fi

      # Step to delete all RC releases and tags for this version
      - name: Delete all RC releases and tags for this version
        if: env.release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ env.version }}
          echo "Deleting all RC releases and tags for version: $VERSION"
          
          # Fetch all tags to ensure we have the latest
          git fetch --tags
          
          # Find and delete RC releases and tags matching this version (vX.Y.Z-rcN)
          for TAG in $(git tag --list "${VERSION}-rc*"); do
            # Find and delete the GitHub release associated with this tag
            RELEASE_ID=$(gh release view "$TAG" --json id --jq ".id" || echo "")
            if [[ -n "$RELEASE_ID" ]]; then
              echo "Deleting GitHub release for tag: $TAG (Release ID: $RELEASE_ID)"
              gh release delete "$RELEASE_ID" --yes
            else
              echo "No GitHub release found for tag: $TAG"
            fi
          
            # Delete the tag after deleting the release
            echo "Deleting tag: $TAG"
            git tag -d "$TAG"
            git push --delete origin "$TAG"
          done

      - name: Create Git tag
        if: env.release == 'true'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ env.version }}
          git push origin ${{ env.version }}

      - name: Notify Packagist
        run: |
          curl -XPOST -H'content-type:application/json' 'https://packagist.org/api/update-package?username=jospina_apptank&apiToken=${{secrets.PACKAGIST_TOKEN}}' -d'{"repository":{"url":"${{vars.PACKAGIST_PACKAGE_URL}}"}}'

      - name: Create GitHub Release
        if: env.release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }}
          draft: false
          prerelease: false
